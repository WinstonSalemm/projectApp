Промпт 2 — MAUI «Быстрая продажа v1» (моки, MVVM)
Контекст: проект src/ProjectApp.Client.Maui (net9.0 MAUI). Пока без подключения к API — моки, чтобы гонять UX циклом.
Цель: экран «Быстрая продажа v1» с поиском товара, добавлением позиций, выбором типа оплаты (3 типа), итогом и валидациями.
Требования:
Структура: Views/QuickSalePage.xaml, ViewModels/QuickSaleViewModel.cs, Models/Product, SaleItem, PaymentType, Services/IMockCatalogService.
Функции:
Поиск (ввод → debounce 300мс) по Name/Sku в мок-каталоге (10–20 SKU).
Добавление позиции в чек (Qty stepper).
Переключатель типа оплаты (3 типа из промпта 1).
Итог: сумма, количество позиций.
Кнопка «Провести» (пока имитирует успех, очищает корзину).
Состояния: пусто/загрузка/ошибка (заглушки), Offline-баннер (фиктивный флаг).
UI: большие кнопки, видимый суммарный итог, доступность (контраст/тап-зоны).
MVVM: никаких прямых обработчиков в код-бихайнд, только биндинги/команды.
Регистрация в AppShell и старт на этот экран.
Выход: патч/дифф с файлами и README-инструкцией (как запустить в Windows и на Android эмуляторе).
Критерии приёмки:
dotnet build собирается; при запуске можно искать SKU, добавлять в чек, менять тип оплаты, «Провести» очищает корзину и показывает тост/алерт «Успех».





Промпт 3 — Провода API↔️MAUI (переключаемый репозиторий)
Контекст: API из промпта 1 запущен локально; MAUI из промпта 2 уже работает на моках.
Цель: добавить переключаемый источник данных (Mock/API) через DI. По умолчанию оставить Mock, чтобы UX не ломался.
Требования:
В MAUI внедрить ICatalogService и ISalesService с двумя реализациями: Mock* и Api*.
Конфиг AppSettings (класс) и appsettings.development.json (встроенный ресурс): UseApi: false, ApiBaseUrl: http://localhost:5000 (или порт из консоли API).
Фабрика/регистрация в MauiProgram.cs: если UseApi=true → регистрировать Api*, иначе Mock*.
ApiCatalogService: GET /api/products?query=... (throttle, cancellation).
ApiSalesService: POST /api/sales — маппинг VM→DTO.
Кнопка в Debug-меню «Переключить источник (Mock/API)» (перезапуск страницы).
Обработка ошибок сети (баннер «Нет соединения»).
Выход: патч/дифф, обновлённый README: как включить API-режим.
Критерии приёмки:
При UseApi=false всё работает на моках.
При UseApi=true поиск идёт в API, «Провести» шлёт POST /api/sales.



Что сделать у себя между промптами

После Промпта 1:
cd C:\projectApp\src\ProjectApp.Api
dotnet run
# открой Swagger и проверь products/sales



После Промпта 2:
Открой src/ProjectApp.sln в Visual Studio → выбери ProjectApp.Client.Maui → F5 (Windows).
Поиграйся с экраном: поиск → добавить → тип оплаты → провести.



После Промпта 3:
В appsettings.development.json поставь UseApi=true, укажи ApiBaseUrl как у /health.
Запусти API, затем MAUI, проверь, что поиск идёт в сеть.