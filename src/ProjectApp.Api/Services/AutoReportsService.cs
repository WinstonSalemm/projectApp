using ProjectApp.Api.Data;
using ProjectApp.Api.Integrations.Telegram;
using ProjectApp.Api.Integrations.Email;
using ProjectApp.Api.Models;
using Microsoft.EntityFrameworkCore;

namespace ProjectApp.Api.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
/// </summary>
public class AutoReportsService
{
    private readonly AppDbContext _db;
    private readonly ITelegramService _telegram;
    private readonly IEmailService _email;
    private readonly OwnerDashboardService _dashboardService;
    private readonly ILogger<AutoReportsService> _logger;

    public AutoReportsService(
        AppDbContext db,
        ITelegramService telegram,
        IEmailService email,
        OwnerDashboardService dashboardService,
        ILogger<AutoReportsService> logger)
    {
        _db = db;
        _telegram = telegram;
        _email = email;
        _dashboardService = dashboardService;
        _logger = logger;
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É
    /// </summary>
    public async Task SendDailyReportAsync()
    {
        try
        {
            var today = DateTime.UtcNow.Date;
            var tomorrow = today.AddDays(1);

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –¥–µ–Ω—å
            var dashboard = await _dashboardService.GetDashboardAsync(today);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            var message = $"üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢</b>\n";
            message += $"üìÖ {today:dd.MM.yyyy}\n\n";

            message += "üí∞ <b>–§–ò–ù–ê–ù–°–´:</b>\n";
            message += $"‚îú –í—ã—Ä—É—á–∫–∞: <b>{dashboard.TodayRevenue:N0} UZS</b>\n";
            message += $"‚îú –ü—Ä–∏–±—ã–ª—å: <b>{dashboard.TodayProfit:N0} UZS</b>\n";
            message += $"‚îú –ü—Ä–æ–¥–∞–∂: <b>{dashboard.TodaySalesCount}</b>\n";
            message += $"‚îî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{dashboard.TodayAverageCheck:N0} UZS</b>\n\n";

            message += "üíµ <b>–ö–ê–°–°–´:</b>\n";
            if (dashboard.CashboxBalances.Any())
            {
                foreach (var cb in dashboard.CashboxBalances.OrderByDescending(x => x.Value))
                {
                    message += $"‚îú {cb.Key}: <b>{cb.Value:N0}</b>\n";
                }
            }
            else
            {
                message += "‚îú –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n";
            }
            message += $"‚îî –í—Å–µ–≥–æ: <b>{dashboard.TotalCash:N0} UZS</b>\n\n";

            message += "üì¶ <b>–°–ö–õ–ê–î:</b>\n";
            message += $"‚îú –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: <b>{dashboard.InventoryValue:N0} UZS</b>\n";
            message += $"‚îî –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤: <b>{dashboard.CriticalStockAlerts.Count}</b>\n\n";

            message += "üí∏ <b>–î–û–õ–ì–ò:</b>\n";
            message += $"‚îú –ö–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã: <b>{dashboard.ClientDebts:N0} UZS</b>\n";
            message += $"‚îî –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö: <b>{dashboard.OverdueDebts.Count}</b>\n\n";

            if (dashboard.Top5ProductsToday.Any())
            {
                message += "üèÜ <b>–¢–û–ü-5 –¢–û–í–ê–†–û–í –î–ù–Ø:</b>\n";
                for (int i = 0; i < Math.Min(5, dashboard.Top5ProductsToday.Count); i++)
                {
                    var p = dashboard.Top5ProductsToday[i];
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –ë–î
                    var product = await _db.Products
                        .Where(pr => pr.Name == p.ProductName)
                        .Select(pr => new { pr.Sku, pr.Price })
                        .FirstOrDefaultAsync();
                    
                    // –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                    var stock = await _db.Batches
                        .Where(b => b.Product.Name == p.ProductName && b.Qty > 0)
                        .SumAsync(b => (int?)b.Qty) ?? 0;
                    
                    var sku = product?.Sku ?? "N/A";
                    var avgPrice = p.TotalQuantity > 0 ? p.TotalRevenue / p.TotalQuantity : 0;
                    
                    message += $"{i + 1}. <b>{p.ProductName}</b>\n";
                    message += $"   üì¶ SKU: {sku}\n";
                    message += $"   üí∞ –í—ã—Ä—É—á–∫–∞: {p.TotalRevenue:N0} UZS\n";
                    message += $"   üî¢ –ü—Ä–æ–¥–∞–Ω–æ: {p.TotalQuantity} —à—Ç √ó {avgPrice:N0} UZS\n";
                    message += $"   üìä –û—Å—Ç–∞—Ç–æ–∫: {stock} —à—Ç\n";
                }
            }
            else
            {
                message += "üèÜ <b>–¢–û–ü-5 –¢–û–í–ê–†–û–í:</b> –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂\n";
            }

            message += $"\n‚è∞ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {DateTime.UtcNow:HH:mm}";

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
            await _telegram.SendMessageToOwnerAsync(message);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ Email (HTML-–≤–µ—Ä—Å–∏—è)
            var emailHtml = EmailTemplates.DailyReport(dashboard);
            await _email.SendToOwnerAsync($"üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {today:dd.MM.yyyy}", emailHtml);
            
            _logger.LogInformation($"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {today:dd.MM.yyyy} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (Telegram + Email)");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞");
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –≤–ª–∞–¥–µ–ª—å—Ü—É
    /// </summary>
    public async Task SendWeeklyReportAsync()
    {
        try
        {
            var today = DateTime.UtcNow.Date;
            var weekStart = today.AddDays(-(int)today.DayOfWeek + 1); // –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
            var weekEnd = today;

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –Ω–µ–¥–µ–ª—é
            var sales = await _db.Sales
                .Where(s => s.CreatedAt >= weekStart && s.CreatedAt < weekEnd.AddDays(1))
                .ToListAsync();

            var totalRevenue = sales.Sum(s => s.Total);
            var salesCount = sales.Count;
            var avgCheck = salesCount > 0 ? totalRevenue / salesCount : 0;

            // –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –∑–∞ –Ω–µ–¥–µ–ª—é
            var topProducts = await (from sale in _db.Sales
                                    where sale.CreatedAt >= weekStart && sale.CreatedAt < weekEnd.AddDays(1)
                                    join saleItem in _db.SaleItems on sale.Id equals saleItem.SaleId
                                    join product in _db.Products on saleItem.ProductId equals product.Id
                                    group saleItem by new { saleItem.ProductId, product.Name } into g
                                    select new
                                    {
                                        ProductName = g.Key.Name,
                                        TotalRevenue = g.Sum(si => si.UnitPrice * si.Qty),
                                        TotalQty = g.Sum(si => si.Qty)
                                    })
                .OrderByDescending(p => p.TotalRevenue)
                .Take(10)
                .ToListAsync();

            // –¢–æ–ø –º–µ–Ω–µ–¥–∂–µ—Ä—ã
            var topManagers = await (from s in _db.Sales
                                    where s.CreatedAt >= weekStart && s.CreatedAt < weekEnd.AddDays(1) && s.CreatedBy != null
                                    group s by s.CreatedBy into g
                                    select new
                                    {
                                        Manager = g.Key,
                                        SalesCount = g.Count(),
                                        TotalRevenue = g.Sum(s => s.Total)
                                    })
                .OrderByDescending(m => m.TotalRevenue)
                .Take(5)
                .ToListAsync();

            // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
            var message = $"üìä <b>–ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ô –û–¢–ß–ï–¢</b>\n";
            message += $"üìÖ {weekStart:dd.MM} - {weekEnd:dd.MM.yyyy}\n\n";

            message += "üí∞ <b>–°–í–û–î–ö–ê –ó–ê –ù–ï–î–ï–õ–Æ:</b>\n";
            message += $"‚îú –í—ã—Ä—É—á–∫–∞: <b>{totalRevenue:N0} UZS</b>\n";
            message += $"‚îú –ü—Ä–æ–¥–∞–∂: <b>{salesCount}</b>\n";
            message += $"‚îî –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: <b>{avgCheck:N0} UZS</b>\n\n";

            if (topProducts.Any())
            {
                message += "üèÜ <b>–¢–û–ü-10 –¢–û–í–ê–†–û–í –ù–ï–î–ï–õ–ò:</b>\n";
                for (int i = 0; i < topProducts.Count; i++)
                {
                    var p = topProducts[i];
                    
                    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
                    var product = await _db.Products
                        .Where(pr => pr.Name == p.ProductName)
                        .Select(pr => new { pr.Sku, pr.Price })
                        .FirstOrDefaultAsync();
                    
                    // –°—á–∏—Ç–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫
                    var stock = await _db.Batches
                        .Where(b => b.Product.Name == p.ProductName && b.Qty > 0)
                        .SumAsync(b => (int?)b.Qty) ?? 0;
                    
                    var sku = product?.Sku ?? "N/A";
                    var avgPrice = p.TotalQty > 0 ? p.TotalRevenue / p.TotalQty : 0;
                    
                    message += $"{i + 1}. <b>{p.ProductName}</b>\n";
                    message += $"   üì¶ SKU: {sku}\n";
                    message += $"   üí∞ –í—ã—Ä—É—á–∫–∞: {p.TotalRevenue:N0} UZS\n";
                    message += $"   üî¢ –ü—Ä–æ–¥–∞–Ω–æ: {p.TotalQty} —à—Ç √ó {avgPrice:N0} UZS\n";
                    message += $"   üìä –û—Å—Ç–∞—Ç–æ–∫: {stock} —à—Ç\n";
                }
                message += "\n";
            }

            if (topManagers.Any())
            {
                message += "üë®‚Äçüíº <b>–¢–û–ü –ú–ï–ù–ï–î–ñ–ï–†–´:</b>\n";
                for (int i = 0; i < topManagers.Count; i++)
                {
                    var m = topManagers[i];
                    message += $"{i + 1}. {m.Manager}\n";
                    message += $"   üí∞ {m.TotalRevenue:N0} UZS ({m.SalesCount} –ø—Ä–æ–¥–∞–∂)\n";
                }
                message += "\n";
            }

            // –î–æ–ª–≥–∏
            var totalDebts = await _db.Debts
                .Where(d => d.Status == DebtStatus.Open)
                .SumAsync(d => (decimal?)d.Amount) ?? 0m;

            message += "üí∏ <b>–î–û–õ–ì–ò:</b>\n";
            message += $"‚îî –ö–ª–∏–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã: <b>{totalDebts:N0} UZS</b>\n\n";

            message += $"‚è∞ –û—Ç—á–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {DateTime.UtcNow:dd.MM.yyyy HH:mm}";

            await _telegram.SendMessageToOwnerAsync(message);
            _logger.LogInformation($"–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∑–∞ {weekStart:dd.MM}-{weekEnd:dd.MM} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞");
        }
    }
}
