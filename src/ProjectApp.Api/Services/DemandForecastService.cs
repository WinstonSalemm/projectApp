using Microsoft.EntityFrameworkCore;
using ProjectApp.Api.Data;

namespace ProjectApp.Api.Services;

public class ProductForecast
{
    public int ProductId { get; set; }
    public string Sku { get; set; } = string.Empty;
    public string Name { get; set; } = string.Empty;
    public decimal CurrentStock { get; set; }
    public decimal AverageDailySales { get; set; }
    public decimal ForecastedDemand { get; set; }  // –ù–∞ —Å–ª–µ–¥—É—é—â–∏–µ N –¥–Ω–µ–π
    public decimal RecommendedOrder { get; set; }   // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑
    public int DaysUntilStockout { get; set; }      // –î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è
    public decimal Trend { get; set; }              // –¢—Ä–µ–Ω–¥ (-1 = –ø–∞–¥–µ–Ω–∏–µ, 0 = —Å—Ç–∞–±–∏–ª—å–Ω–æ, 1 = —Ä–æ—Å—Ç)
    public string Status { get; set; } = string.Empty;
}

public class DemandForecastService
{
    private readonly AppDbContext _db;
    private readonly ILogger<DemandForecastService> _logger;

    public DemandForecastService(AppDbContext db, ILogger<DemandForecastService> logger)
    {
        _db = db;
        _logger = logger;
    }

    /// <summary>
    /// –ü—Ä–æ–≥–Ω–æ–∑ —Å–ø—Ä–æ—Å–∞ –Ω–∞ N –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥
    /// </summary>
    public async Task<List<ProductForecast>> ForecastAsync(int forecastDays = 30, CancellationToken ct = default)
    {
        _logger.LogInformation("[DemandForecast] Forecasting demand for {Days} days", forecastDays);

        var now = DateTime.UtcNow;
        var last30Days = now.AddDays(-30);
        var last60Days = now.AddDays(-60);

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –∏ 60 –¥–Ω–µ–π
        var recentSales = await _db.SaleItems
            .Include(si => si.Sale)
            .Where(si => si.Sale.CreatedAt >= last30Days)
            .GroupBy(si => si.ProductId)
            .Select(g => new
            {
                ProductId = g.Key,
                TotalQty30 = g.Sum(si => si.Qty),
                SalesCount = g.Count()
            })
            .ToListAsync(ct);

        var olderSales = await _db.SaleItems
            .Include(si => si.Sale)
            .Where(si => si.Sale.CreatedAt >= last60Days && si.Sale.CreatedAt < last30Days)
            .GroupBy(si => si.ProductId)
            .Select(g => new
            {
                ProductId = g.Key,
                TotalQty30 = g.Sum(si => si.Qty)
            })
            .ToListAsync(ct);

        var olderSalesDict = olderSales.ToDictionary(s => s.ProductId, s => s.TotalQty30);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –æ—Å—Ç–∞—Ç–∫–∏
        var stocks = await _db.Stocks
            .GroupBy(s => s.ProductId)
            .Select(g => new { ProductId = g.Key, TotalQty = g.Sum(s => s.Qty) })
            .ToDictionaryAsync(s => s.ProductId, s => s.TotalQty, ct);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–∞—Ö
        var productIds = recentSales.Select(s => s.ProductId).ToList();
        var products = await _db.Products
            .Where(p => productIds.Contains(p.Id))
            .ToDictionaryAsync(p => p.Id, ct);

        var forecasts = new List<ProductForecast>();

        foreach (var sale in recentSales)
        {
            if (!products.TryGetValue(sale.ProductId, out var product))
                continue;

            var currentStock = stocks.TryGetValue(sale.ProductId, out var qty) ? qty : 0;

            // –°—Ä–µ–¥–Ω–µ–¥–Ω–µ–≤–Ω—ã–µ –ø—Ä–æ–¥–∞–∂–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
            var avgDailySales = sale.TotalQty30 / 30m;

            // –¢—Ä–µ–Ω–¥: —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ 30
            var prevSales = olderSalesDict.TryGetValue(sale.ProductId, out var prev) ? prev : 0;
            var trend = 0m;
            if (prevSales > 0)
            {
                var change = ((sale.TotalQty30 - prevSales) / prevSales) * 100;
                trend = change > 10 ? 1m : (change < -10 ? -1m : 0m);
            }

            // –ü—Ä–æ–≥–Ω–æ–∑ —Å —É—á–µ—Ç–æ–º —Ç—Ä–µ–Ω–¥–∞
            var forecastMultiplier = 1.0m + (trend * 0.2m); // ¬±20% –ø—Ä–∏ —Å–∏–ª—å–Ω–æ–º —Ç—Ä–µ–Ω–¥–µ
            var forecastedDemand = avgDailySales * forecastDays * forecastMultiplier;

            // –î–Ω–µ–π –¥–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è
            var daysUntilStockout = avgDailySales > 0 ? (int)(currentStock / avgDailySales) : 999;

            // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–∫–∞–∑ (–∑–∞–ø–∞—Å –Ω–∞ –ø—Ä–æ–≥–Ω–æ–∑ + —Å—Ç—Ä–∞—Ö–æ–≤–æ–π –∑–∞–ø–∞—Å 20%)
            var safetyStock = forecastedDemand * 0.2m;
            var recommendedOrder = Math.Max(0, forecastedDemand + safetyStock - currentStock);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            var status = DetermineStatus(daysUntilStockout, avgDailySales, currentStock);

            forecasts.Add(new ProductForecast
            {
                ProductId = sale.ProductId,
                Sku = product.Sku,
                Name = product.Name,
                CurrentStock = currentStock,
                AverageDailySales = decimal.Round(avgDailySales, 2),
                ForecastedDemand = decimal.Round(forecastedDemand, 2),
                RecommendedOrder = decimal.Round(recommendedOrder, 2),
                DaysUntilStockout = daysUntilStockout,
                Trend = trend,
                Status = status
            });
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        forecasts = forecasts
            .OrderBy(f => f.DaysUntilStockout)
            .ThenByDescending(f => f.AverageDailySales)
            .ToList();

        _logger.LogInformation("[DemandForecast] Forecasted {Count} products", forecasts.Count);

        var critical = forecasts.Count(f => f.Status == "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ");
        var warning = forecasts.Count(f => f.Status == "üü° –í–Ω–∏–º–∞–Ω–∏–µ");
        var ok = forecasts.Count(f => f.Status == "üü¢ –ù–æ—Ä–º–∞");

        _logger.LogInformation(
            "[DemandForecast] Status: {Critical} critical, {Warning} warning, {Ok} ok",
            critical, warning, ok);

        return forecasts;
    }

    private static string DetermineStatus(int daysUntilStockout, decimal avgDailySales, decimal currentStock)
    {
        if (avgDailySales == 0)
            return "‚ö™ –ù–µ—Ç –ø—Ä–æ–¥–∞–∂";

        if (daysUntilStockout <= 7)
            return "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ";

        if (daysUntilStockout <= 14)
            return "üü° –í–Ω–∏–º–∞–Ω–∏–µ";

        if (currentStock == 0)
            return "‚ö´ –î–µ—Ñ–∏—Ü–∏—Ç";

        return "üü¢ –ù–æ—Ä–º–∞";
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –¥–µ—Ñ–∏—Ü–∏—Ç–æ–º
    /// </summary>
    public async Task<List<ProductForecast>> GetCriticalProductsAsync(CancellationToken ct = default)
    {
        var forecast = await ForecastAsync(30, ct);
        return forecast
            .Where(f => f.Status == "üî¥ –ö—Ä–∏—Ç–∏—á–Ω–æ" || f.Status == "‚ö´ –î–µ—Ñ–∏—Ü–∏—Ç")
            .Take(20)
            .ToList();
    }

    /// <summary>
    /// –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∑–∞–∫—É–ø–∫–µ
    /// </summary>
    public async Task<Dictionary<int, decimal>> GetPurchaseRecommendationsAsync(int forecastDays = 30, CancellationToken ct = default)
    {
        var forecast = await ForecastAsync(forecastDays, ct);
        
        return forecast
            .Where(f => f.RecommendedOrder > 0)
            .OrderByDescending(f => f.AverageDailySales)
            .ToDictionary(f => f.ProductId, f => f.RecommendedOrder);
    }
}
