using ProjectApp.Api.Data;
using ProjectApp.Api.Integrations.Telegram;
using ProjectApp.Api.Models;
using Microsoft.EntityFrameworkCore;

namespace ProjectApp.Api.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –≤–ª–∞–¥–µ–ª—å—Ü—É
/// </summary>
public class AlertsService
{
    private readonly AppDbContext _db;
    private readonly ITelegramService _telegram;
    private readonly ILogger<AlertsService> _logger;

    public AlertsService(
        AppDbContext db,
        ITelegramService telegram,
        ILogger<AlertsService> logger)
    {
        _db = db;
        _telegram = telegram;
        _logger = logger;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
    /// </summary>
    public async Task CheckCriticalStocksAsync()
    {
        try
        {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã —Å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏ (<10 –µ–¥–∏–Ω–∏—Ü)
            var criticalProducts = await (from stock in _db.Stocks
                                         group stock by stock.ProductId into g
                                         let totalQty = g.Sum(s => s.Qty)
                                         where totalQty > 0 && totalQty <= 10
                                         join product in _db.Products on g.Key equals product.Id
                                         select new
                                         {
                                             product.Name,
                                             product.Sku,
                                             Qty = totalQty
                                         })
                                         .OrderBy(p => p.Qty)
                                         .Take(10)
                                         .ToListAsync();

            if (criticalProducts.Any())
            {
                var message = "üî¥ <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–°–¢–ê–¢–ö–ò!</b>\n\n";
                foreach (var p in criticalProducts)
                {
                    message += $"üì¶ {p.Name}\n";
                    message += $"   SKU: {p.Sku}\n";
                    message += $"   –û—Å—Ç–∞—Ç–æ–∫: <b>{p.Qty:F1}</b> ‚ö†Ô∏è\n\n";
                }
                message += "–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ —Å—Ä–æ—á–Ω–∞—è –∑–∞–∫—É–ø–∫–∞!";

                await _telegram.SendMessageToOwnerAsync(message);
                _logger.LogInformation($"–ê–ª–µ—Ä—Ç –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({criticalProducts.Count} —Ç–æ–≤–∞—Ä–æ–≤)");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Å—Ç–∞—Ç–∫–æ–≤");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –¥–æ–ª–≥–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç
    /// </summary>
    public async Task CheckOverdueDebtsAsync()
    {
        try
        {
            var now = DateTime.UtcNow;
            var overdueDebts = await _db.Debts
                .Where(d => d.DueDate < now && d.Status == DebtStatus.Open)
                .Join(_db.Sales, d => d.SaleId, s => s.Id, (d, s) => new
                {
                    d.Id,
                    s.ClientName,
                    d.Amount,
                    d.DueDate,
                    DaysOverdue = (int)(now - d.DueDate).TotalDays
                })
                .OrderByDescending(d => d.DaysOverdue)
                .Take(10)
                .ToListAsync();

            if (overdueDebts.Any())
            {
                var totalOverdue = overdueDebts.Sum(d => d.Amount);
                var message = $"üí∏ <b>–ü–†–û–°–†–û–ß–ï–ù–ù–´–ï –î–û–õ–ì–ò!</b>\n\n";
                message += $"–í—Å–µ–≥–æ: <b>{totalOverdue:N0} UZS</b>\n";
                message += $"–î–æ–ª–∂–Ω–∏–∫–æ–≤: <b>{overdueDebts.Count}</b>\n\n";

                foreach (var d in overdueDebts.Take(5))
                {
                    message += $"üë§ {d.ClientName}\n";
                    message += $"   –°—É–º–º–∞: {d.Amount:N0} UZS\n";
                    message += $"   –ü—Ä–æ—Å—Ä–æ—á–∫–∞: <b>{d.DaysOverdue} –¥–Ω.</b> ‚è∞\n\n";
                }

                if (overdueDebts.Count > 5)
                {
                    message += $"...–∏ –µ—â—ë {overdueDebts.Count - 5} –¥–æ–ª–∂–Ω–∏–∫–æ–≤\n\n";
                }

                message += "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∑—ã—Å–∫–∞—Ç—å –¥–æ–ª–≥–∏!";

                await _telegram.SendMessageToOwnerAsync(message);
                _logger.LogInformation($"–ê–ª–µ—Ä—Ç –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({overdueDebts.Count} –¥–æ–ª–∂–Ω–∏–∫–æ–≤)");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –¥–æ–ª–≥–æ–≤");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∑–∫–∏–µ –±–∞–ª–∞–Ω—Å—ã –≤ –∫–∞—Å—Å–∞—Ö
    /// </summary>
    public async Task CheckLowCashboxBalancesAsync()
    {
        try
        {
            var lowBalanceCashboxes = await _db.Cashboxes
                .Where(c => c.IsActive && c.CurrentBalance < 1000000) // <1 –º–ª–Ω UZS
                .OrderBy(c => c.CurrentBalance)
                .ToListAsync();

            if (lowBalanceCashboxes.Any())
            {
                var message = "üí∞ <b>–ù–ò–ó–ö–ò–ï –ë–ê–õ–ê–ù–°–´ –í –ö–ê–°–°–ê–•!</b>\n\n";
                foreach (var cb in lowBalanceCashboxes)
                {
                    message += $"üè¶ {cb.Name}\n";
                    message += $"   –ë–∞–ª–∞–Ω—Å: <b>{cb.CurrentBalance:N0} {cb.Currency}</b> ‚ö†Ô∏è\n\n";
                }
                message += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∞—Å—Å—ã.";

                await _telegram.SendMessageToOwnerAsync(message);
                _logger.LogInformation($"–ê–ª–µ—Ä—Ç –æ –Ω–∏–∑–∫–∏—Ö –±–∞–ª–∞–Ω—Å–∞—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({lowBalanceCashboxes.Count} –∫–∞—Å—Å)");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ –∫–∞—Å—Å");
        }
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–ª–≥–∏–µ –±—Ä–æ–Ω–∏ –±–µ–∑ –ø—Ä–æ–¥–∞–∂–∏
    /// </summary>
    public async Task CheckLongPendingReservationsAsync()
    {
        try
        {
            var twoDaysAgo = DateTime.UtcNow.AddDays(-2);
            var longReservations = await _db.Reservations
                .Where(r => r.Status == ReservationStatus.Active && r.CreatedAt < twoDaysAgo)
                .OrderBy(r => r.CreatedAt)
                .Take(10)
                .ToListAsync();

            if (longReservations.Any())
            {
                var message = "‚è≥ <b>–î–û–õ–ì–ò–ï –ë–†–û–ù–ò –ë–ï–ó –ü–†–û–î–ê–ñ–ò!</b>\n\n";
                message += $"–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: <b>{longReservations.Count}</b>\n\n";

                foreach (var r in longReservations.Take(5))
                {
                    var daysOld = (int)(DateTime.UtcNow - r.CreatedAt).TotalDays;
                    var clientName = "N/A";
                    if (r.ClientId.HasValue)
                    {
                        var client = await _db.Clients.FindAsync(r.ClientId.Value);
                        clientName = client?.Name ?? "N/A";
                    }
                    message += $"üìã –ë—Ä–æ–Ω—å #{r.Id}\n";
                    message += $"   –ö–ª–∏–µ–Ω—Ç: {clientName}\n";
                    message += $"   –°–æ–∑–¥–∞–Ω–∞: {daysOld} –¥–Ω. –Ω–∞–∑–∞–¥\n";
                    message += $"   –°—Ä–æ–∫: {r.ReservedUntil:dd.MM.yyyy}\n\n";
                }

                if (longReservations.Count > 5)
                {
                    message += $"...–∏ –µ—â—ë {longReservations.Count - 5} –±—Ä–æ–Ω–µ–π\n\n";
                }

                message += "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏!";

                await _telegram.SendMessageToOwnerAsync(message);
                _logger.LogInformation($"–ê–ª–µ—Ä—Ç –æ –¥–æ–ª–≥–∏—Ö –±—Ä–æ–Ω—è—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ({longReservations.Count} –±—Ä–æ–Ω–µ–π)");
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–ª–≥–∏—Ö –±—Ä–æ–Ω–µ–π");
        }
    }

    /// <summary>
    /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä—É–ø–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ
    /// </summary>
    public async Task NotifyLargeSaleAsync(int saleId, decimal total)
    {
        try
        {
            var sale = await _db.Sales
                .Include(s => s.Items)
                .FirstOrDefaultAsync(s => s.Id == saleId);

            if (sale == null) return;

            var message = $"üí∞ <b>–ö–†–£–ü–ù–ê–Ø –ü–†–û–î–ê–ñ–ê!</b>\n\n";
            message += $"üìä –ü—Ä–æ–¥–∞–∂–∞ #{sale.Id}\n";
            message += $"üë§ –ö–ª–∏–µ–Ω—Ç: {sale.ClientName}\n";
            message += $"üíµ –°—É–º–º–∞: <b>{total:N0} UZS</b>\n";
            message += $"üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä: {sale.CreatedBy ?? "–ù–µ —É–∫–∞–∑–∞–Ω"}\n";
            message += $"üì¶ –¢–æ–≤–∞—Ä–æ–≤: {sale.Items.Count}\n";
            message += $"üïê –í—Ä–µ–º—è: {sale.CreatedAt:dd.MM.yyyy HH:mm}\n";

            await _telegram.SendMessageToOwnerAsync(message);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, $"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä—É–ø–Ω–æ–π –ø—Ä–æ–¥–∞–∂–µ {saleId}");
        }
    }
}
