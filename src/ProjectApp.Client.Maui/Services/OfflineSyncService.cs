using System.Text.Json;
using Microsoft.Extensions.Logging;
using Microsoft.Maui.Networking;
using ProjectApp.Client.Maui.Models;

namespace ProjectApp.Client.Maui.Services;

/// <summary>
/// –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ñ–ª–∞–π–Ω –æ–ø–µ—Ä–∞—Ü–∏–π
/// </summary>
public class OfflineSyncService
{
    private readonly LocalDatabase _localDb;
    private readonly ISalesService _salesService;
    private readonly ILogger<OfflineSyncService> _logger;
    private Timer? _syncTimer;
    private bool _isSyncing;

    // –°–æ–±—ã—Ç–∏—è –¥–ª—è UI
    public event EventHandler<SyncStatusEventArgs>? SyncStatusChanged;
    public int PendingOperationsCount { get; private set; }
    public bool IsOnline { get; private set; }

    public OfflineSyncService(
        LocalDatabase localDb,
        ISalesService salesService,
        ILogger<OfflineSyncService> logger)
    {
        _localDb = localDb;
        _salesService = salesService;
        _logger = logger;

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–∏
        Connectivity.ConnectivityChanged += OnConnectivityChanged;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ç–∏
        IsOnline = Connectivity.NetworkAccess == NetworkAccess.Internet;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ —Ñ–æ–Ω–µ (–Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä!)
        Task.Run(async () =>
        {
            try
            {
                await Task.Delay(1000); // –î–∞–µ–º UI –≤—Ä–µ–º—è –ø—Ä–æ–≥—Ä—É–∑–∏—Ç—å—Å—è
                await UpdatePendingCountAsync();
                NotifyStatusChanged();
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                _syncTimer = new Timer(async _ => await TrySyncAsync(), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OfflineSyncService");
            }
        });
    }

    private async void OnConnectivityChanged(object? sender, ConnectivityChangedEventArgs e)
    {
        var wasOnline = IsOnline;
        IsOnline = e.NetworkAccess == NetworkAccess.Internet;

        _logger.LogInformation("Connectivity changed: {Access}, Online: {Online}", e.NetworkAccess, IsOnline);

        if (!wasOnline && IsOnline)
        {
            // –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—è–≤–∏–ª—Å—è - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º!
            _logger.LogInformation("üåê –ò–Ω—Ç–µ—Ä–Ω–µ—Ç –ø–æ—è–≤–∏–ª—Å—è! –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é...");
            await TrySyncAsync();
        }

        NotifyStatusChanged();
    }

    /// <summary>
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
    /// </summary>
    public async Task<bool> QueueOperationAsync(string operationType, object payload, string createdBy)
    {
        try
        {
            var operation = new OfflineOperation
            {
                OperationType = operationType,
                PayloadJson = JsonSerializer.Serialize(payload),
                CreatedAt = DateTime.UtcNow,
                CreatedBy = createdBy,
                Status = SyncStatus.Pending,
                RetryCount = 0
            };

            var id = await _localDb.SaveOperationAsync(operation);
            operation.Id = id;
            
            _logger.LogInformation("üíæ –û–ø–µ—Ä–∞—Ü–∏—è {Type} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ (ID: {Id})", operationType, id);

            await UpdatePendingCountAsync();
            NotifyStatusChanged();

            // –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É
            if (IsOnline)
            {
                await TrySyncAsync();
            }

            return true;
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ {Type}", operationType);
            return false;
        }
    }

    /// <summary>
    /// –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    /// </summary>
    public async Task TrySyncAsync()
    {
        if (_isSyncing || !IsOnline)
            return;

        try
        {
            _isSyncing = true;
            NotifyStatusChanged();

            var pending = await _localDb.GetPendingOperationsAsync();
            if (pending.Count == 0)
                return;

            _logger.LogInformation("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞–π–¥–µ–Ω–æ {Count} –æ–ø–µ—Ä–∞—Ü–∏–π", pending.Count);

            foreach (var operation in pending)
            {
                await SyncOperationAsync(operation);
            }

            await UpdatePendingCountAsync();
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏");
        }
        finally
        {
            _isSyncing = false;
            NotifyStatusChanged();
        }
    }

    private async Task SyncOperationAsync(OfflineOperation operation)
    {
        try
        {
            _logger.LogInformation("üì§ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ {Type} (ID: {Id})", operation.OperationType, operation.Id);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ "Syncing"
            await _localDb.UpdateOperationStatusAsync(operation.Id, SyncStatus.Syncing);

            bool success = false;
            int? serverRecordId = null;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
            switch (operation.OperationType)
            {
                case OfflineOperationType.Sale:
                    var saleDraft = JsonSerializer.Deserialize<SaleDraft>(operation.PayloadJson);
                    if (saleDraft != null)
                    {
                        var result = await _salesService.SubmitSaleAsync(saleDraft);
                        success = result.Success;
                        serverRecordId = result.SaleId;
                        
                        if (!success)
                        {
                            await _localDb.UpdateOperationStatusAsync(
                                operation.Id, 
                                SyncStatus.Failed, 
                                result.ErrorMessage);
                            return;
                        }
                    }
                    break;

                // TODO: –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã –æ–ø–µ—Ä–∞—Ü–∏–π (Supply, Transfer, Defective, Refill)
                
                default:
                    _logger.LogWarning("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: {Type}", operation.OperationType);
                    break;
            }

            if (success)
            {
                await _localDb.UpdateOperationStatusAsync(
                    operation.Id, 
                    SyncStatus.Synced, 
                    null, 
                    serverRecordId);
                
                _logger.LogInformation("‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è {Type} (ID: {Id}) —É—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ ‚Üí Server ID: {ServerId}", 
                    operation.OperationType, operation.Id, serverRecordId);
            }
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ {Id}", operation.Id);
            await _localDb.UpdateOperationStatusAsync(
                operation.Id, 
                SyncStatus.Failed, 
                ex.Message);
        }
    }

    private async Task UpdatePendingCountAsync()
    {
        PendingOperationsCount = await _localDb.GetPendingCountAsync();
    }

    private void NotifyStatusChanged()
    {
        SyncStatusChanged?.Invoke(this, new SyncStatusEventArgs
        {
            IsOnline = IsOnline,
            IsSyncing = _isSyncing,
            PendingCount = PendingOperationsCount
        });
    }

    public void Dispose()
    {
        _syncTimer?.Dispose();
        Connectivity.ConnectivityChanged -= OnConnectivityChanged;
    }
}

public class SyncStatusEventArgs : EventArgs
{
    public bool IsOnline { get; set; }
    public bool IsSyncing { get; set; }
    public int PendingCount { get; set; }
}
