using Microsoft.Extensions.Logging;
using ProjectApp.Client.Maui.Models;

namespace ProjectApp.Client.Maui.Services;

/// <summary>
/// –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è SalesService —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–∞
/// </summary>
public class OfflineSalesService : ISalesService
{
    private readonly ISalesService _innerService;
    private readonly OfflineSyncService _syncService;
    private readonly AuthService _auth;
    private readonly ILogger<OfflineSalesService> _logger;

    public OfflineSalesService(
        ApiSalesService innerService,
        OfflineSyncService syncService,
        AuthService auth,
        ILogger<OfflineSalesService> logger)
    {
        _innerService = innerService;
        _syncService = syncService;
        _auth = auth;
        _logger = logger;
    }

    public async Task<SalesResult> SubmitSaleAsync(SaleDraft draft, CancellationToken ct = default)
    {
        var userName = _auth.UserName ?? "unknown";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ç—å
        if (!_syncService.IsOnline)
        {
            // –û—Ñ–ª–∞–π–Ω - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
            _logger.LogWarning("üì¥ –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: –ø—Ä–æ–¥–∞–∂–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ª–æ–∫–∞–ª—å–Ω–æ");
            
            var queued = await _syncService.QueueOperationAsync(
                OfflineOperationType.Sale,
                draft,
                userName);

            if (queued)
            {
                return SalesResult.Ok(null); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º success –Ω–æ –±–µ–∑ ID (–ø–æ–∫–∞ –Ω–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ)
            }
            else
            {
                return SalesResult.Fail("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ª–æ–∫–∞–ª—å–Ω–æ");
            }
        }

        // –û–Ω–ª–∞–π–Ω - –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
        try
        {
            var result = await _innerService.SubmitSaleAsync(draft, ct);
            
            if (result.Success)
            {
                _logger.LogInformation("‚úÖ –ü—Ä–æ–¥–∞–∂–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞–ø—Ä—è–º—É—é (ID: {Id})", result.SaleId);
                return result;
            }
            else
            {
                // –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
                _logger.LogWarning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å: {Error}", result.ErrorMessage);
                
                await _syncService.QueueOperationAsync(
                    OfflineOperationType.Sale,
                    draft,
                    userName);

                return SalesResult.Ok(null); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º success (–æ–ø–µ—Ä–∞—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏)
            }
        }
        catch (Exception ex)
        {
            // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
            _logger.LogError(ex, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å");
            
            await _syncService.QueueOperationAsync(
                OfflineOperationType.Sale,
                draft,
                userName);

            return SalesResult.Ok(null); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º success (–æ–ø–µ—Ä–∞—Ü–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏)
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
    public Task<bool> UploadSalePhotoAsync(int saleId, Stream photoStream, string fileName, CancellationToken ct = default)
        => _innerService.UploadSalePhotoAsync(saleId, photoStream, fileName, ct);
}
