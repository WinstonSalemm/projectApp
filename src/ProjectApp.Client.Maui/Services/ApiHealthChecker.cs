using Microsoft.Extensions.Logging;
using System.Net.Http;

namespace ProjectApp.Client.Maui.Services;

/// <summary>
/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
/// </summary>
public class ApiHealthChecker
{
    private readonly IHttpClientFactory _httpClientFactory;
    private readonly AppSettings _settings;
    private readonly ILogger<ApiHealthChecker> _logger;

    public ApiHealthChecker(
        IHttpClientFactory httpClientFactory,
        AppSettings settings,
        ILogger<ApiHealthChecker> logger)
    {
        _httpClientFactory = httpClientFactory;
        _settings = settings;
        _logger = logger;
    }

    /// <summary>
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    /// </summary>
    /// <param name="timeoutSeconds">–¢–∞–π–º–∞—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö</param>
    /// <returns>True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω</returns>
    public async Task<ApiHealthResult> CheckHealthAsync(int timeoutSeconds = 5)
    {
        try
        {
            var apiUrl = _settings.ApiBaseUrl ?? "https://tranquil-upliftment-production.up.railway.app";
            _logger.LogInformation("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API: {Url}", apiUrl);

            var client = _httpClientFactory.CreateClient(HttpClientNames.Api);
            client.BaseAddress = new Uri(apiUrl);
            client.Timeout = TimeSpan.FromSeconds(timeoutSeconds);

            // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É endpoint (products - –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–µ–Ω)
            var response = await client.GetAsync("/api/products?pageSize=1");
            
            if (response.IsSuccessStatusCode || response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                _logger.LogInformation("‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {Url}", apiUrl);
                return new ApiHealthResult
                {
                    IsAvailable = true,
                    ApiUrl = apiUrl,
                    Message = "API –¥–æ—Å—Ç—É–ø–µ–Ω"
                };
            }
            else
            {
                _logger.LogWarning("‚ö†Ô∏è API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {StatusCode}", response.StatusCode);
                return new ApiHealthResult
                {
                    IsAvailable = false,
                    ApiUrl = apiUrl,
                    Message = $"API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (HTTP {response.StatusCode})"
                };
            }
        }
        catch (TaskCanceledException)
        {
            _logger.LogWarning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API");
            return new ApiHealthResult
            {
                IsAvailable = false,
                ApiUrl = _settings.ApiBaseUrl ?? "unknown",
                Message = "–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
            };
        }
        catch (HttpRequestException ex)
        {
            _logger.LogWarning(ex, "üåê –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API");
            return new ApiHealthResult
            {
                IsAvailable = false,
                ApiUrl = _settings.ApiBaseUrl ?? "unknown",
                Message = "–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ –∏–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
            };
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ API");
            return new ApiHealthResult
            {
                IsAvailable = false,
                ApiUrl = _settings.ApiBaseUrl ?? "unknown",
                Message = $"–û—à–∏–±–∫–∞: {ex.Message}"
            };
        }
    }
}

public class ApiHealthResult
{
    public bool IsAvailable { get; set; }
    public string ApiUrl { get; set; } = string.Empty;
    public string Message { get; set; } = string.Empty;
}
